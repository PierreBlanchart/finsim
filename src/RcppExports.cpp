// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// cuda_sim_BS_call
arma::vec cuda_sim_BS_call(const arma::vec& S, const float H, const float E, const float r, const float sigma, const int Nsample);
RcppExport SEXP _finsim_cuda_sim_BS_call(SEXP SSEXP, SEXP HSEXP, SEXP ESEXP, SEXP rSEXP, SEXP sigmaSEXP, SEXP NsampleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const float >::type H(HSEXP);
    Rcpp::traits::input_parameter< const float >::type E(ESEXP);
    Rcpp::traits::input_parameter< const float >::type r(rSEXP);
    Rcpp::traits::input_parameter< const float >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const int >::type Nsample(NsampleSEXP);
    rcpp_result_gen = Rcpp::wrap(cuda_sim_BS_call(S, H, E, r, sigma, Nsample));
    return rcpp_result_gen;
END_RCPP
}
// cuda_sim_JDP_GPU
arma::vec cuda_sim_JDP_GPU(const float H, const float r, const float sigma, const double lambda_jump, const float mu_jump, const float sigma_jump, const float dt, const int Nsample);
RcppExport SEXP _finsim_cuda_sim_JDP_GPU(SEXP HSEXP, SEXP rSEXP, SEXP sigmaSEXP, SEXP lambda_jumpSEXP, SEXP mu_jumpSEXP, SEXP sigma_jumpSEXP, SEXP dtSEXP, SEXP NsampleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const float >::type H(HSEXP);
    Rcpp::traits::input_parameter< const float >::type r(rSEXP);
    Rcpp::traits::input_parameter< const float >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda_jump(lambda_jumpSEXP);
    Rcpp::traits::input_parameter< const float >::type mu_jump(mu_jumpSEXP);
    Rcpp::traits::input_parameter< const float >::type sigma_jump(sigma_jumpSEXP);
    Rcpp::traits::input_parameter< const float >::type dt(dtSEXP);
    Rcpp::traits::input_parameter< const int >::type Nsample(NsampleSEXP);
    rcpp_result_gen = Rcpp::wrap(cuda_sim_JDP_GPU(H, r, sigma, lambda_jump, mu_jump, sigma_jump, dt, Nsample));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_finsim_cuda_sim_BS_call", (DL_FUNC) &_finsim_cuda_sim_BS_call, 6},
    {"_finsim_cuda_sim_JDP_GPU", (DL_FUNC) &_finsim_cuda_sim_JDP_GPU, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_finsim(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
